"""
문제 설명
피보나치 수는 F(0) = 0, F(1) = 1일 때, 1 이상의 n에 대하여 F(n) = F(n-1) + F(n-2) 가 적용되는 점화식입니다.
2 이상의 n이 입력되었을 때, n번째 피보나치 수를 1234567으로 나눈 나머지를 리턴하는 함수, solution을 완성해 주세요.

제한 사항
* n은 1이상, 100000이하인 자연수입니다.

입출력   예
n	   return
3	   2
5	   5

입출력 예 설명
피보나치수는 0번째부터 0, 1, 1, 2, 3, 5, ... 와 같이 이어집니다.
"""


# 일단 피보나치 수를 보면 [(숫자)는 자리를 의미함].
# 0(0) + [1(1) = 1(2)]
# 1(1) + [1(2) = 2(3)]
# 1(2) + [2(3) = 3(4)]
# 2(3) + [3(4) = 5(5)]
# 간단하게 대괄호에 쌓인 숫자들이, 다음 수를 구할 때 사용되는 공통점을 발견할 수 있다.
def first_solution(position):
    # 시작할 피노차리 수열 리스트를 만든다.
    fibo_list = [0, 1]

    # 위치의 수를 구하기 위해 돌기 시작한다.
    while len(fibo_list) <= position:
        # 끝에서 두 수를 더하여 리스트에 추가.
        fibo_list.append(fibo_list[-1] + fibo_list[-2])

    # 원하는 포지션의 수에서 (1234567) 로 나눈 나머지를 구한다.
    return fibo_list[position] % 1234567


assert first_solution(3) == 2, first_solution(3)
assert first_solution(5) == 5
assert first_solution(1000) == 138544
