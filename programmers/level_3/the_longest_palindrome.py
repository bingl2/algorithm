"""
문제 설명
앞뒤를 뒤집어도 똑같은 문자열을 팰린드롬(palindrome)이라고 합니다.
문자열 s가 주어질 때, s의 부분문자열(Substring)중 가장 긴 팰린드롬의 길이를 return 하는 solution 함수를 완성해 주세요.

예를들면, 문자열 s가 abcdcba이면 7을 return하고 abacde이면 3을 return합니다.

제한사항
문자열 s의 길이 : 2500 이하의 자연수
문자열 s는 알파벳 소문자로만 구성
입출력 예

s	      answer
abcdcba	  7
abacde	  3

입출력 예 설명
입출력 예 #1
4번째자리 'd'를 기준으로 문자열 s 전체가 팰린드롬이 되므로 7을 return합니다.

입출력 예 #2
2번째자리 'b'를 기준으로 aba가 팰린드롬이 되므로 3을 return합니다.
"""


def solution(s):
    answer = 0

    # [실행] 버튼을 누르면 출력 값을 볼 수 있습니다.
    print('Hello Python')

    return answer


assert solution("abcdcba") == 7
assert solution("abacde") == 3


"""
일단 포기한 문제 .. 


문자열을 하나씩 집어넣어 양쪽의 같은 값이 있는 경우 (양쪽의 시작과 끝을 인덱스 값으로 집어넣는) 배열들에 집어넣고
다음 해달 배영들을 기준으로 돌며, 앞의 문자의 경우에는 -1, 끝의 문자는 +1을 하여 같은 문자가 있는지 확인하는 방식의 무한 루프를 돈 후 

그중에서 가장 긴 팰린드롬을 찾는 방식을 생각했었다. 근데 이 경우 짝수가 해당이 되질 않는다.

그래서 짝수형 팰린드롬을 만드는 방식을 생각해봤다. 연달아 있는 문자들을 추출을 해내고,
그 문자들을 위와 같은 방식으로 시작과 끝 검사하는 배열에 집어 넣어서 같이 체크를 하는 방식.

근데 위의 방식대로 진행한다면 최대 값이 2,500 길이가 나올 경우 10초가 그냥 넘어갈것 같다는 생각이 들어 잠시 멈춰두고 .. 
관련 알고리즘을 검색했는데 O(N)이 걸리는 "Manacher 알고리즘" 를 발견했는데 이해 조차 못하겠다 ..

일단 설명을 읽어도 이해를 못하는 알고리즘이기에 일단 현재는 멈춰두려고 한다 .

"""
